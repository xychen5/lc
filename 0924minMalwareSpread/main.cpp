// ConsoleApplication1.cpp : 此文件包含 "main" 函数。程序执行将在此处开始并结束。
//

#include <iostream>
#include <iostream>
#include <iomanip>
#include <vector>
#include <algorithm>
#include <limits.h>
#include <numeric>
#include <list>
#include <queue>
#include <unordered_set>
#include <unordered_map>
#include <map>
#include <set>

using namespace std;
class Solution {
public:
    int find(vector<int>& parent, int x) {
        while(x != parent[x]) {
            parent[x] = parent[parent[x]];
            x = parent[x];
        }
        return x;
    }

    bool unionMerge(vector<int>& parent, vector<int>& subTreeSize, int x, int y) {
        int findX = find(parent, x);
        int findY = find(parent, y);
        
        if(findX != findY) {
            parent[findX] = findY;
            subTreeSize[findY] += subTreeSize[findX];
            return true;
        }
        return false;
    }

    int minMalwareSpread(vector<vector<int>>& graph, vector<int>& initial) {
        int n = graph.size();
        vector<int> parent(n);
        vector<int> subTreeSize(n);

        for(int i = 0; i < n; ++i) {
            parent[i] = i;
            subTreeSize[i] = 1;
        }
        
        map<int, int> connectSizeToInitial; 
        // cal each connected component's size, attach initial with a component's "color"
        for(int i = 0; i < n; ++i) {
            for(int j = 0; j < n; ++j) {
                if(graph[i][j] == 1) {
                    unionMerge(parent, subTreeSize, i, j);
                }
            }
        }

        map<int, int> rootToInit;
        
        // if two initial number in same connected component, then remove one of them
        // will cause the same malware spread result
        // each color pick a smallest idx as res candidate in initial, finally pick the max connect size
        // find max connected size
        int maxConnectSize = INT_MIN;
        for(auto& i : initial) {
            int curRoot = find(parent, i);
            // cout << i << " ->> " << curRoot << endl;
            if(rootToInit.find(curRoot) != rootToInit.end()) {
                rootToInit[curRoot] = -1;
                continue; 
            }
            rootToInit[curRoot] = i;
        }

        bool hasLonelyInitial = false;
        for(auto& i : initial) {
            // those initial who do not share root
            if(rootToInit[find(parent, i)] != -1) { 
                // cout << "valid!" << endl;
                hasLonelyInitial = true;
                int curSubSize = subTreeSize[find(parent, i)];
                if(connectSizeToInitial.find(curSubSize) != connectSizeToInitial.end()) {
                    connectSizeToInitial[curSubSize] = min(connectSizeToInitial[curSubSize], i);
                    continue;
                }
                connectSizeToInitial[curSubSize] = i;
                maxConnectSize = max(maxConnectSize, curSubSize);
                // cout << maxConnectSize << endl;
            }
        }
        

        // for(auto& p : connectSizeToInitial) {
        //     cout << p.first << " -<<> " << p.second << endl;
        // }

        // for(auto& p : rootToInit) {
        //     cout << p.first << " -> " << p.second << endl;
        // }

        if(hasLonelyInitial) {
            return connectSizeToInitial[maxConnectSize];
        }
        return *min_element(initial.begin(), initial.end());
    }
}

int main()
{
    // vector<int> nums = {1, 15, 5, 11};
    // vector<int> nums = {1, 3};
    // vector<int> nums = {1, 3};
    int n = 2;
    vector<int> nums1d = { 1, 0 };
    vector<vector<int>> nums2d1 = { {1}, {0} };
    vector<vector<int>> nums2d4 = { {1,1,3,3},{3,1,4,2},{3,2,4,4},{1,3,2,4},{2,3,3,4} };
    Solution sl;
    // std::cout << sl.medianSlidingWindow(nums1d, 3) << std::endl;

    // std::cout << ios::left << std::setw(20) << "Hello, World!" << std::setw(5) << "a s " << 1 << std::endl;
    return 0;
    std::cout << "Hello World!\n";
}